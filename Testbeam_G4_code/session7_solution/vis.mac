# Macro file for the visualization setting in the initialization phase 
# of the ED example when running in interactive mode
#

# Use these open statements to open selected visualization
#
# Use this open statement to create an OpenGL view:
/vis/open OGL 600x600-0+0

# Use this open statement to create an OpenInventor view:
#/vis/open OI
#
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/verbose errors
#
# Draw geometry:
/vis/drawVolume

# Specify view angle:
/vis/viewer/set/viewpointVector -1 0 0
/vis/viewer/set/lightsVector -1 0 0

# Specify style (surface, wireframe, auxiliary edges,...)
/vis/viewer/set/style wireframe
/vis/viewer/set/auxiliaryEdge true
/vis/viewer/set/lineSegmentsPerCircle 100

# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 2
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)

# Draw hits at end of event:
/vis/scene/add/hits

# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma

# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true

# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/default/setDrawStepPts true
# To select or override default colours (note: e+ is blue by default):
#/vis/modeling/trajectories/list
/vis/modeling/trajectories/drawByParticleID-0/set e- yellow
/vis/modeling/trajectories/drawByParticleID-0/set e+ blue
/vis/modeling/trajectories/drawByParticleID-0/set gamma green
/vis/modeling/trajectories/drawByParticleID-0/set mu- red

# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate

# To get nice view
/vis/viewer/set/background white
/vis/viewer/set/style surface
/vis/viewer/set/lightsThetaPhi -135 135 deg

/vis/geometry/set/visibility World 0 false
/vis/geometry/set/colour Scintillator 0 green
/vis/geometry/set/colour lead 0 yellow

# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings

# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush

# Add a menu « View » in the toolbar
/gui/addMenu menu_view View
#
# In this View menu, add two buttons for setting the viewPoint at Theta/Phi (0,0) and (90,0)
/gui/addButton menu_view "viewpoint (0,0)" "/vis/viewer/set/viewpointThetaPhi 0 0"
/gui/addButton menu_view "viewpoint (90,0)" "/vis/viewer/set/viewpointThetaPhi 90 0"
#
# In this View menu, add a button for setting a viewPoint and ask for it (define a command without parameters)
/gui/addButton menu_view "custom viewpoint" "/vis/viewer/set/viewpointThetaPhi"

